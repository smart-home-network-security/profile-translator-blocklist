{% macro verdict(policy_name) %}
uint32_t old_verdict = verdict;

        {% if drop_proba == 0 %}
        // Binary ACCEPT
        verdict = NF_ACCEPT;
        {% elif drop_proba == 1 %}
        // Binary DROP
        verdict = NF_DROP;
        {% else %}
        // Stochastic dropping
        uint16_t thread_id = *((uint16_t *) arg);
        float random_float = rand_r(&(thread_data[thread_id].seed)) / (RAND_MAX + 1.0);
        verdict = (random_float < DROP_PROBA) ? NF_DROP : NF_ACCEPT;
        #ifdef DEBUG
        printf("Generated random float: %f. Drop probability: %f.\n", random_float, DROP_PROBA);
        #endif /* DEBUG */
        {% endif %}

        #if defined LOG || defined DEBUG
        if (verdict == NF_DROP) {
            #ifdef LOG
            print_hash(hash);
            printf(",%ld.%06ld,{{policy_name}},,DROP\n", (long int)timestamp.tv_sec, (long int)timestamp.tv_usec);
            #endif /* LOG */
            #ifdef DEBUG
            printf("DROP - Policy: {{policy_name}}\n");
            if (old_verdict != NF_DROP) {
                dropped_packets++;
                printf("Dropped packets: %hu\n", dropped_packets);
            }
            #endif /* DEBUG */
        }
        #endif /* LOG || DEBUG */
{% endmacro %}

{% macro write_callback_function(loop_index, nfqueue) %}
/**
 * @brief {{nfqueue.name}} callback function, called when a packet enters the queue.
 * 
 * @param pkt_id packet ID for netfilter queue
 * @param hash packet payload SHA256 hash (only present if LOG is defined)
 * @param timestamp packet timestamp (only present if LOG is defined)
 * @param pkt_len packet length, in bytes
 * @param payload pointer to the packet payload
 * @param arg pointer to the argument passed to the callback function
 * @return the verdict for the packet
 */
#ifdef LOG
uint32_t callback_{{nfqueue.get_name_slug()}}(int pkt_id, uint8_t *hash, struct timeval timestamp, int pkt_len, uint8_t *payload, void *arg)
#else
uint32_t callback_{{nfqueue.get_name_slug()}}(int pkt_id, int pkt_len, uint8_t *payload, void *arg)
#endif /* LOG */
{
    #ifdef DEBUG
    printf("Received packet from nfqueue {{nfqueue.queue_num}}\n");
    #endif

    {% set custom_parsers = [] %}
    {% set need_src_addr = namespace(value=False) %}
    {% set need_dst_addr = namespace(value=False) %}
    {% for policy_dict in nfqueue.policies %}
    {% set policy = policy_dict["policy"] %}
    {% for nfq_match in policy.nfq_matches %}
    {% if nfq_match["template"]|is_list %}
    {% for template in nfq_match["template"] %}
    {% if "compare_ip" in template or "dns_entry_contains" in template %}
    {% if "src_addr" in template and not need_src_addr.value %}
    {% set need_src_addr.value = True %}
    uint32_t src_addr = get_ipv4_src_addr(payload);  // IPv4 source address, in network byte order
    {% endif %}
    {% if "dst_addr" in template and not need_dst_addr.value %}
    {% set need_dst_addr.value = True %}
    uint32_t dst_addr = get_ipv4_dst_addr(payload);  // IPv4 destination address, in network byte order
    {% endif %}
    {% endif %}
    {% endfor %}
    {% else %}
    {% if "compare_ip" in nfq_match["template"] or "dns_entry_contains" in nfq_match["template"] %}
    {% if "src_addr" in nfq_match["template"] and not need_src_addr.value %}
    {% set need_src_addr.value = True %}
    uint32_t src_addr = get_ipv4_src_addr(payload);  // IPv4 source address, in network byte order
    {% endif %}
    {% if "dst_addr" in nfq_match["template"] and not need_dst_addr.value %}
    {% set need_dst_addr.value = True %}
    uint32_t dst_addr = get_ipv4_dst_addr(payload);  // IPv4 destination address, in network byte order
    {% endif %}
    {% endif %}
    {% endif %}
    {% endfor %}
    {% if policy.custom_parser and policy.custom_parser not in custom_parsers %}
    {% if policy.custom_parser == 'ssdp' and not need_dst_addr.value %}
    {% set need_dst_addr.value = True %}
    uint32_t dst_addr = get_ipv4_dst_addr(payload);  // IPv4 destination address, in network byte order
    {% endif %}
    {% if policy.nfq_matches %}
    // Skip layer 3 and 4 headers
    {% if policy.custom_parser == 'http' or policy.custom_parser == 'coap' %}
    size_t l3_header_length = get_l3_header_length(payload);
    {% if policy.custom_parser == 'http' %}
    uint16_t dst_port = get_dst_port(payload + l3_header_length);
    {% elif policy.custom_parser == 'coap' %}
    uint16_t coap_length = get_udp_payload_length(payload + l3_header_length);
    {% endif %}
    {% endif %}
    size_t skipped = get_headers_length(payload);
    {% if policy.custom_parser == 'http' %}
    bool has_payload = pkt_len - skipped >= HTTP_MESSAGE_MIN_LEN;
    bool is_http_message = has_payload && is_http(payload + skipped);
    {% endif %}

    {% if "dns" in policy.custom_parser %}
    // Parse payload as DNS message
    dns_message_t dns_message = dns_parse_message(payload + skipped);
    #ifdef DEBUG
    dns_print_message(dns_message);
    #endif
    {% elif policy.custom_parser %}
    // Parse payload as {{policy.custom_parser|upper}} message
    {{policy.custom_parser}}_message_t {{policy.custom_parser}}_message = {{policy.custom_parser}}_parse_message(payload + skipped
    {%- if policy.custom_parser == 'http' -%}
    , dst_port
    {%- elif policy.custom_parser == 'ssdp' -%}
    , dst_addr
    {%- elif policy.custom_parser == 'coap' -%}
    , coap_length
    {%- endif -%}
    );
    #ifdef DEBUG
    {% if policy.custom_parser == 'http' %}
    if (is_http_message) {
        http_print_message(http_message);
    } else {
        printf("TCP message with destination port %hu corresponding to HTTP traffic.\n", dst_port);
    }
    {% else %}
    {{policy.custom_parser}}_print_message({{policy.custom_parser}}_message);
    {% endif %}
    #endif
    {% endif %}
    {% endif %}
    {% set tmp = custom_parsers.append(policy.custom_parser) %}
    {% endif %}
    {% endfor %}
    uint32_t verdict = NF_ACCEPT;  // Packet verdict: ACCEPT or DROP

    {% for policy_dict in nfqueue.policies %}
    {% set policy_idx = policy_dict["policy_idx"] %}
    {% set policy = policy_dict["policy"] %}
    {% set policy_name = policy.name %}
    /* Policy {{policy_name}} */
    {% if policy.nfq_matches %}
    if (
        {% set rule = policy.nfq_matches[0] %}
        {% if rule['template'] | is_list %}
        (
        {% for i in range(rule['template']|length) %}
        {% set template = rule['template'][i] %}
        {% set match = rule['match'][i] %}
        {{ template.format(match) }}
        {% if i < rule['template']|length - 1 %}
        ||
        {% endif %}
        {% endfor %}
        )
        {% else %}
        {{ rule['template'].format(rule['match']) }}
        {% endif %}
        {% for rule in policy.nfq_matches[1:] %}
        &&
        {% if rule['match'] | is_list %}
        (
        {% for i in range(rule['template']|length) %}
        {% set template = rule['template'][i] %}
        {% set match = rule['match'][i] %}
        {{ template.format(match) }}
        {% if i < rule['template']|length - 1 %}
        ||
        {% endif %}
        {% endfor %}
        )
        {% else %}
        {{ rule['template'].format(rule['match']) }}
        {% endif %}
        {% endfor %}
    ) {

        {% set is_dns_response = namespace(value=False) %}
        {% if policy.custom_parser == "dns" %}
        {% for nfq_match in policy.nfq_matches %}
        {% if "dns_message.header.qr == " in nfq_match["template"] and nfq_match["match"] == 1 and not is_dns_response.value %}
        {% set is_dns_response.value = True %}
        // Retrieve IP addresses corresponding to the given domain name from the DNS response
        char *domain_name = NULL;
        ip_list_t ip_list = ip_list_init();
        {% endif %}
        {% if is_dns_response.value %}
        {% if nfq_match['template'] | is_list %}
        {% for i in range(nfq_match['template']|length) %}
        {% set template = nfq_match['template'][i] %}
        {% if "domain_name" in template %}
        {% set domain_name = nfq_match['match'][i] %}
        {% if loop.index == 1 %}
        if ({{ template.format(domain_name) }}) {
        {% else %}
        else if ({{ template.format(domain_name) }}) {
        {% endif %}
            domain_name = "{{domain_name}}";
            ip_list = dns_get_ip_from_name(dns_message.answers, dns_message.header.ancount, domain_name);
        }
        {% endif %}
        {% endfor %}
        {% else %}
        {% if "domain_name" in nfq_match["template"] %}
        {% set domain_name = nfq_match["match"] %}
        domain_name = "{{domain_name}}";
        ip_list = dns_get_ip_from_name(dns_message.answers, dns_message.header.ancount, domain_name);
        {% endif %}
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}

        {% if is_dns_response.value %}
        if (ip_list.ip_count > 0) {
            // Add IP addresses to DNS map
            dns_map_add(dns_map, domain_name, ip_list);
        }
        {% endif %}

        {{ verdict(policy_name) }}
    }
    {% elif loop.last %}
    // No other policy matched for this nfqueue
    {{ verdict(nfqueue.name) }}
    {% endif %}
    {% endfor %}

    {% for custom_parser in custom_parsers %}
    // Free memory allocated for parsed messages
    {% if "dns" in custom_parser %}
    dns_free_message(dns_message);
    {% elif custom_parser != "ssdp" %}
    {{custom_parser}}_free_message({{custom_parser}}_message);
    {% endif %}
    {% endfor %}

    #ifdef LOG
    if (verdict != NF_DROP) {
        // Log packet as accepted
        print_hash(hash);
        printf(",%ld.%06ld,{{nfqueue.name}},,ACCEPT\n", (long int)timestamp.tv_sec, (long int)timestamp.tv_usec);
    }
    free(hash);
    #endif /* LOG */

    return verdict;
}

{% endmacro %}

{% for nfqueue in nfqueues if nfqueue.queue_num >= 0 %}

{{ write_callback_function(loop.index, nfqueue) }}

{% endfor %}

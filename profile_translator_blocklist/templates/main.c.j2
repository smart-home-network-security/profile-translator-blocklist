{% set use_dns = domain_names|length > 0 %}

/**
 * @brief SIGINT handler, flush stdout and exit.
 *
 * @param arg unused
 */
void sigint_handler(int arg) {
    fflush(stdout);
    exit(0);
}


/**
 * @brief Print program usage.
 * 
 * @param prog program name
 */
void usage(char* prog) {
    {% if use_dns %}
    fprintf(stderr, "Usage: %s [-s DNS_SERVER_IP] [-p DROP_PROBA]\n", prog);
    {% else %}
    fprintf(stderr, "Usage: %s [-p DROP_PROBA]\n", prog);
    {% endif %}
}


/**
 * @brief Program entry point
 * 
 * @param argc number of command line arguments
 * @param argv list of command line arguments
 * @return exit code, 0 if success
 */
int main(int argc, char *argv[]) {

    // Initialize variables
    int ret;
    {% if use_dns %}
    char *dns_server_ip = "192.168.1.1";  // Default DNS server: LAN gateway
    {% endif %}

    // Setup SIGINT handler
    signal(SIGINT, sigint_handler);


    /* COMMAND LINE ARGUMENTS */
    int opt;
    {% if use_dns %}
    while ((opt = getopt(argc, argv, "hp:s:")) != -1)
    {% else %}
    while ((opt = getopt(argc, argv, "hp:")) != -1)
    {% endif %}
    {
        switch (opt)
        {
        case 'h':
            /* Help */
            usage(argv[0]);
            exit(EXIT_SUCCESS);
        case 'p':
            /* Random verdict mode: drop probability (float between 0 and 1) */
            DROP_PROBA = atof(optarg);
            break;
        {% if use_dns %}
        case 's':
            /* IP address of the network gateway */
            dns_server_ip = optarg;
            break;
        {% endif %}
        default:
            usage(argv[0]);
            exit(EXIT_FAILURE);
        }
    }
    #ifdef DEBUG
    printf("Drop probability for random verdict mode: %f\n", DROP_PROBA);
    #endif /* DEBUG */


    #ifdef LOG
    // CSV log file header
    printf("hash,timestamp,policy,state,verdict\n");
    #endif /* LOG */


    /* GLOBAL STRUCTURES INITIALIZATION */

    {% if "dns" in custom_parsers or "mdns" in custom_parsers or use_dns %}
    // Initialize variables for DNS
    dns_map = dns_map_create();
    dns_message_t dns_response;
    ip_list_t ip_list;
    dns_entry_t *dns_entry;

    {% if use_dns %}
    // Open socket for DNS
    int sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Server address: network gateway
    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(53);
    server_addr.sin_addr.s_addr = inet_addr(dns_server_ip);

    {% for name in domain_names %}
    // Add addresses for domain {{name}} to DNS map
    ret = dns_send_query("{{name}}", sockfd, &server_addr);
    if (ret == 0) {
        ret = dns_receive_response(sockfd, &server_addr, &dns_response);
        if (ret == 0) {
            ip_list = dns_get_ip_from_name(dns_response.answers, dns_response.header.ancount, "{{name}}");
            {% set subdomain = name.split(".", 1)[1] %}
            dns_map_add(dns_map, "{{subdomain}}", ip_list);
            #ifdef DEBUG
            // Check DNS map has been correctly updated
            dns_entry = dns_map_get(dns_map, "{{subdomain}}");
            dns_entry_print(dns_entry);
            #endif /* DEBUG */
        }
    }

    {% endfor %}
    {% endif %}
    {% endif %}
    

    {% if num_threads > 0 %}
    /* NFQUEUE THREADS LAUNCH */

    // Create threads
    uint8_t i = 0;

    {% for nfqueue in nfqueues if nfqueue.queue_num >= 0 %}
    {% set nfqueue_name = nfqueue.get_name_slug() %}
    /* {{nfqueue.name}} */
    // Setup thread-specific data
    thread_data[i].id = i;
    thread_data[i].seed = time(NULL) + i;
    thread_arg_t thread_arg_{{nfqueue_name}} = {
        .queue_id = {{nfqueue.queue_num}},
        .func = &callback_{{nfqueue_name}},
        .arg = &(thread_data[i].id)
    };
    ret = pthread_create(&(thread_data[i++].thread), NULL, nfqueue_thread, (void *) &thread_arg_{{nfqueue_name}});
    assert(ret == 0);
    
    {% endfor %}
    // Wait forever for threads
    for (i = 0; i < NUM_THREADS; i++) {
        pthread_join(thread_data[i++].thread, NULL);
    }
    {% endif %}


    /* FREE MEMORY */

    {% if "dns" in custom_parsers or "mdns" in custom_parsers or use_dns %}
    // Free DNS map
    dns_map_free(dns_map);
    {% endif %}

    return 0;
}

